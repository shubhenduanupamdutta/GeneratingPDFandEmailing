#!/usr/bin/env python3

import json
import locale
import os
import sys
import reports
import emails
from dotenv import load_dotenv

load_dotenv()
print(os.environ["EMAIL"])


def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(
        car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """Analyzes the data, looking for maximums.

Returns a list of lines that summarize the information.
"""
    max_revenue = {"revenue": 0}
    max_sale = {"sale": 0}
    most_popular = {}
    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        item_sale = item["total_sales"]
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item
        # handled  also handle max sales
        if item_sale > max_sale["sale"]:
            max_sale["sale"] = item_sale
            max_sale["model"] = item["car"]["car_model"]

        # handled: also handle most popular car_year
        car_year = item["car"]["car_year"]
        most_popular[car_year] = most_popular.get(car_year, 0) + item_sale
    # sorting most popular year
    popular_year = [(year, sale) for year, sale in most_popular.items()]
    popular_year.sort(key=lambda x: x[1], reverse=True)
    summary = ["The {} generated the most revenue: ${}".format(
        format_car(max_revenue["car"]), max_revenue["revenue"]),
        f"The {max_sale['model']} had the most sales: {max_sale['sale']}",
        f"The most popular year was {popular_year[0][0]} with {popular_year[0][1]} sales"]
    return summary


def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
    return table_data


def main(argv):
    """Process the JSON data and generate a full report out of it."""
    data = load_data("car_sales.json")
    summary = process_data(data)
    print(summary)
    # TODO: turn this into a PDF report
    filename = "tmp/cars.pdf"
    summary_sale = "<br/>".join(summary)
    table_data = cars_dict_to_table(data)
    title = "Sale summary for last month"
    reports.generate(filename, title, summary_sale, table_data)

    # TODO: send the PDF report as an email attachment
    # sender = "automation@example.com"
    #  print(sender)
    # receiver = "student-03-c4343d6df8a3@example.com"
    sender = os.environ['EMAIL']
    receiver = os.environ['EMAIL_TO']
    subject = "Sale summary for last month"
    email_body = "\n".join(summary)
    attachment = filename
    msg = emails.generate(sender, receiver, subject, email_body, attachment)
    # emails.send(msg)
    emails.send_mail(msg)


if __name__ == "__main__":
    main(sys.argv)
